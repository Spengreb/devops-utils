#!/usr/bin/env python
#
# Copyright 2015 gimoh
#
# This file is part of devops-utils.
#
# devops-utils is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# devops-utils is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with devops-utils.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import print_function

import argparse
import grp
import os
import pwd
import shutil
import sys
import re
import textwrap

from subprocess import check_call, CalledProcessError


PROGS = (
    'ansible', 'ansible-doc', 'ansible-galaxy', 'ansible-playbook',
    'ansible-vault', 'fab',
    )


def install_file(src, dst, owner, group, mode):
    shutil.copy(src, dst)
    uid = pwd.getpwnam(owner).pw_uid
    gid = grp.getgrnam(group).gr_gid
    os.chown(dst, uid, gid)
    os.chmod(dst, mode)

def install_file_if_exists(src, dst, owner, group, mode):
    if not os.path.exists(src):
        return
    install_file(src, dst, owner, group, mode)

def init_ssh_agent():
    if not os.path.exists('/tmp/ssh_agent'):
        return
    os.environ['SSH_AUTH_SOCK'] = '/tmp/ssh_agent'

def init_ssh_key():
    install_file_if_exists('/var/local/ssh.key', '/root/.ssh/id_rsa',
                           'root', 'root', 0o600)

def init_ssh_config():
    install_file_if_exists('/var/local/ssh_config', '/root/.ssh/config',
                           'root', 'root', 0o600)

def run(prog, args):
    """Run the specified program."""
    init_ssh_agent()
    init_ssh_key()
    init_ssh_config()
    os.execvp(prog, (prog,) + tuple(args))

def install(args):
    """Install a runner and shortcuts to all supported programs.

    The runner will execute the command it's run as via docker run.
    """
    parser = argparse.ArgumentParser(prog='install',
                                     description=install.__doc__)
    parser.add_argument(
        '--image-name', help=('name of docker image to use when running '
                              'commands via runner (def: %(default)s)'))
    parser.set_defaults(image_name='gimoh/devops-utils')
    args = parser.parse_args(args)

    try:
        check_call(('mountpoint', '-q', '/target'))
    except CalledProcessError:
        print(textwrap.dedent('''\
            /target is not a mountpoint

            Re-run this image with -v $HOME/.local/bin:/target
            '''))
        return 2

    print('installing runner')
    replacements = {'PROGS': PROGS, 'DOCKER_IMAGE': args.image_name}
    replacement_var_marker = re.compile('##INIT_VAR:([^#]+)##$')
    with open('external-runner', 'r') as sfobj,\
         open('/target/devops-utils', 'w') as dfobj:
        for line in sfobj:
            replacement_var = replacement_var_marker.search(line.rstrip())
            if replacement_var:
                var = replacement_var.group(1)
                line = '{} = {!r}\n'.format(var, replacements[var])
            dfobj.write(line)
    shutil.copystat('external-runner', '/target/devops-utils')

    print('installing links ... ', end='')
    for prog in PROGS:
        link = os.path.join('/target', prog)
        print(' {}'.format(prog), end='')
        if os.path.exists(link):
            print(' (skip)', end='')
        else:
            os.symlink('devops-utils', link)
    print('')

def main(args=sys.argv[1:]):
    """Run a program in devops-utils container."""
    parser = argparse.ArgumentParser(description=main.__doc__, add_help=False)
    parser.add_argument('prog', help='program to run (e.g.: install, {})'.
                                     format(', '.join(PROGS)))

    args, prog_args = parser.parse_known_args(args)
    print({'args': args, 'prog_args': prog_args})

    if args.prog == 'install':
        sys.exit(install(prog_args))

    run(args.prog, prog_args)


if __name__ == '__main__':
    main()
