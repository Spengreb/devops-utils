#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2015 gimoh
#
# This file is part of devops-utils.
#
# devops-utils is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# devops-utils is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with devops-utils.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import print_function

import argparse
import logging
import os
import sys
import subprocess


PROGS = ()  ##INIT:VAR:PROGS##
DOCKER_IMAGE = 'gimoh/devops-utils'  ##INIT:VAR:DOCKER_IMAGE##


class DockerRunCommand(object):
    """docker run command"""
    def __init__(self, prog, prog_args, docker_args=None):
        self.docker_args = docker_args if docker_args else []
        self.prog = prog
        self.prog_args = list(prog_args)

    def __repr__(self):
        return '{}(docker_args={!r}, prog={!r}, prog_args={!r})'.format(
            self.__class__.__name__,
            self.docker_args, self.prog, self.prog_args)

    def __str__(self):
        return '{}<cmd: "{}">'.format(
            self.__class__.__name__, ' '.join(self.cmd))

    @property
    def cmd(self):
        cmd = ['docker', 'run']
        cmd.extend(self.docker_args)
        cmd.extend([DOCKER_IMAGE, self.prog])
        cmd.extend(self.prog_args)
        return cmd

from devops_utils.builders import *  ##INIT:MODULE:devops_utils.builders##
argparse_builders = Builders()
docker_run_builders = Builders()

argparse_builder = argparse_builders.append
docker_run_builder = docker_run_builders.append

@argparse_builder
def argparse_base(parser):
    self_name = os.path.basename(sys.argv[0])
    if self_name in ('external-runner', 'devops-utils'):
        parser.add_argument('prog', help='program to run (e.g.: install, {})'.
                                        format(', '.join(PROGS)))
    else:
        parser.set_defaults(prog=self_name)

    parser.add_argument('++debug', action='store_true',
                        help='enable debugging output')
    parser.add_argument('+O', '++docker-opt', action='append',
                        help='pass specified long-style option to docker run')
    parser.add_argument('++help', action='store_true',
                        help='show this help message and exit')
    parser.set_defaults(docker_opt=[])

@docker_run_builder
def docker_run_base(args, docker_run):
    docker_run.docker_args.extend('-i -t --rm'.split())
    if args.debug:
        docker_run.docker_args.extend(('-e', 'DEVOPS_UTILS_DEBUG=true'))

@docker_run_builder
def docker_run_opts(args, docker_run):
    docker_run.docker_args.extend(['--%s' % opt for opt in args.docker_opt])

from devops_utils.plugin import load_plugins  ##INIT:SUPPRESS##
BASEDIR=os.path.dirname(__file__)  ##INIT:SUPPRESS##
load_plugins('runner', globals(), basedir=BASEDIR)  ##INIT:PLUGINS:runner##

def main(args=sys.argv[1:]):
    """Run a program in devops-utils container."""
    logging.basicConfig(
        format='(%(module)s:%(funcName)s:%(lineno)s) %(message)s',
        level=logging.INFO)

    parser = argparse.ArgumentParser(description=main.__doc__, add_help=False,
                                     prefix_chars='+')
    argparse_builders(parser)
    args, prog_args = parser.parse_known_args(args)

    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
        logging.debug('%r', {'args': args, 'prog_args': prog_args})

    if args.help:
        parser.print_help()
        parser.exit()

    docker_run = DockerRunCommand(args.prog, prog_args)
    docker_run_builders(args, docker_run)
    logging.debug('%r', {'docker_run': docker_run})
    logging.debug('%s', docker_run)

    subprocess.check_call(docker_run.cmd)


if __name__ == '__main__':
    main()
